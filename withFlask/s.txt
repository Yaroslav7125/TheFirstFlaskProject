@app.route('/<string:name>/<int:id>')
def NextSite(name , id):
        return "SecondSite.html" + name + str(id);


""" передача параметров в функция через url"""


=======================================================


использование шаблонизатора 

<!!!>базовый html<!!!>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

  <title>{% block title %}{% endblock%}</title>
</head>
<body>

</body>
</html>


<!!!>наследуем html<!!!> 

{% extends 'base_file.html' %}
{% block title  %}
About me
{% endblock %}
{% block body  %}
<div class="container"><h1>about us</h1></div>
{% endblock %}

=======================================================
подключение css c использованием шаблонизатора
<link rel="stylesheet" href="{{url_for('static',file_name="css/main.css")}}">


===========================================================================

настройка передачи данных по http

 POST и GET

@app.route('/create', method = ['POST', 'GET'])
def NextSite():#name , id):
    if request.method == "POST":
        pass
        # делаем что-то при методе получения из формы
    else:
        return render_template("create_article.html") # просто отправляем рендер
        #return "SecondSite.html" + name + str(id);

++++++++++++++++++++

таким образом функция реализации POST запросов:



 
@app.route('/create', methods = ['POST', 'GET'])
def NextSite():#name , id):
    if request.method == "POST":
        title = request.form['title']
        intro = request.form['intro']
        text = request.form['text']

        article_for_db_setting = Article(title = title, intro = intro, TheText = text)  #создаём обьёкт который будем сеттить в bd

        try: #попытка сеттить в базу
            db.session.add(article_for_db_setting) # добавление в базу
            db.session.commit(); # применение изменений
            return redirect("/")# в случае успешного добавления, перенапрявлем на "/"

        except:
            return "При добавлении возникла ошибка"

        # делаем что-то при методе получения из формы
    else:
        return render_template("create_article.html")
        #return "SecondSite.html" + name + str(id);


Учитывая то что, 

обьект который мы зраним в базе:

	class Article(db.Model):# класс обьектов, которые будем хранить в базе
     id = db.Column(db.Integer, primary_key = True)
     title = db.Column(db.String(100), nullable = False)
     intro = db.Column(db.String(300), nullable = False)
     TheText = db.Column(db.Text, nullable = False)
     date = db.Column(db.DateTime, default = datetime.utcnow)
     def __repr__(self):
         return '<Article %r' % self.id

тоесть у уобьекта есть id, который primary key, title - который необходимо задавать,
intro - ещё одна характеристика которую необходимо задавать
TheText - также как и intro


эти характеристики мы задаём из формы в html разметке 
которая выгялдит как:


<form action="" method="post"> <br> <!--начало формы-->
    <input type="text" name= "title" id = "title" class="form-control" placeholder = "Введите название"><br>
    <textarea name="intro" id="intro" placeholder = "Введите анонс"class = "form-control" ></textarea><br>
    <textarea name="text" id="text" placeholder = "Введите основной текст" class = "form-control" ></textarea><br>
    <input type="submit" class = "btn btn-success" value = "отпрвить">
  </form> <!--конец формы-->


обратить внимание следует на name, по нему идёт извлечение данных в переменные в питухон коде сервака

чтобы создать базу следует открыть интерпритатар: 
>>> from myApp.py import bd
...
>>> bd.create_all()

должна создаться база, иначе гуглить и молиться
-------------------Основы шаблонизатора Jinja--------------------------------

В Jinja двойные фигурные скобки {{ }} 
позволяют получить результат выражение, 
переменную или вызвать функцию и вывести значение в шаблоне.
Например: 
>>> from jinja2 import Template
>>> Template("{{ 10 + 3 }}").render() 
'13'
Другие операторы сравнения и присваивания и логические операторы Python также могут использоваться внутри выражений.
Вывод переменных
>>> Template("{{ var }}").render(var=12)
'12'
Это могут быть не только числа и строки Python.
Шаблоны Jinja работают со сложными данными, такими как списки, словари, кортежи и даже пользовательские классы.
Если обратится к индексу, который не существует, Jinja просто выведет пустую строку.
Для доступа к атрибутам и методам объекта нужно использовать оператор доступ точка (.).
>>> class Foo:
...     def __init__(self, i):
...         self.i = i
...     def do_something(self):
...         return "do_something() called"
...
>>>
>>> Template("{{ obj.i }}").render(obj=Foo(5))
'5'
>>>
>>> Template("{{ obj.do_something() }}").render(obj=Foo(5))
'do_something() called'
>>>
----
Комментарии
В Jinja используется следующий синтаксис для добавления комментариев в одну или несколько строк:
{# комментарий #}
{#
    это
    многострочный
    комментарий
#}
Внутри шаблона можно задать переменную с помощью инструкции set.
{% set fruit = 'apple' %}

{% set name, age = 'Tom', 20 %}
Управляющие конструкции позволяют добавлять в шаблоны элементы управления потоком и циклы.
По умолчанию, управляющие конструкции используют разделитель {% … %} вместо двойных фигурных скобок {{ ... }}.
Цикл for предоставляет специальную переменную loop для отслеживания прогресса цикла. Например:
loop.index внутри цикла for начинает отсчет с 1. 
В таблице упомянуты остальные широко используемые атрибуты переменной loop.
loop.index() - то же самое что и loop.index, но с индексом 0, то есть, начинает считать с 0, а не с 1.
loop.revindex - возвращает номер итерации с конца цикла (считает с 1).
loop.revindex() - возвращает номер итерации с конца цикла (считает с 0).
loop.first - возвращает True, если итерация первая. В противном случае — False
loop.last - возвращает True, если итерация последняя. В противном случае — False.
loop.length - возвращает длину цикла(количество итераций).
----- Экранирование---------
отключение экранирования:
{% autoescape true %}
    Escaping enabled
{% endautoescape %}

{% autoescape false %}
    Escaping disabled
{% endautoescape %}














